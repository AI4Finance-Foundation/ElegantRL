import sys
import torch as th

TEN = th.Tensor

NodesSycamoreN53M12 = [
    [19, 20, 3], [20, 43, 6], [21, 22, 19, 7], [22, 25, 0, 11], [23, 26, 21, 12], [24, 28, 13], [25, 29, 1, 14],
    [26, 30, 2, 15], [27, 31, 23, 55], [28, 32, 36], [29, 33, 24, 16], [30, 34, 3, 17], [31, 35, 4, 58],
    [33, 36, 5, 39], [34, 37, 6, 18], [35, 38, 7, 60], [37, 39, 10, 41], [38, 40, 11, 61], [40, 41, 14, 127],
    [0, 128, 104, 2], [62, 42, 1, 0], [42, 63, 2, 4], [43, 44, 3, 2], [44, 65, 4, 8], [66, 45, 5, 10], [45, 46, 6, 3],
    [46, 47, 7, 4], [47, 69, 8, 51], [70, 48, 9, 5], [48, 49, 10, 6], [49, 50, 11, 7], [50, 51, 12, 8], [74, 52, 9],
    [52, 53, 13, 10], [53, 54, 14, 11], [54, 55, 15, 12], [78, 56, 9, 13], [56, 57, 16, 14], [57, 58, 17, 15],
    [81, 59, 13, 16], [59, 60, 18, 17], [83, 61, 16, 18], [62, 63, 20, 21], [85, 64, 1, 22], [64, 65, 22, 23],
    [66, 67, 24, 25], [67, 68, 25, 26], [68, 69, 26, 27], [70, 71, 28, 29], [71, 72, 29, 30], [72, 73, 30, 31],
    [73, 93, 31, 27], [74, 75, 32, 33], [75, 76, 33, 34], [76, 77, 34, 35], [77, 97, 35, 8], [78, 79, 36, 37],
    [79, 80, 37, 38], [80, 100, 38, 12], [81, 82, 39, 40], [82, 102, 40, 15], [83, 103, 41, 17], [129, 84, 20, 42],
    [84, 106, 42, 21], [85, 86, 43, 44], [86, 109, 44, 23], [133, 87, 24, 45], [87, 88, 45, 46], [88, 89, 46, 47],
    [89, 113, 47, 27], [137, 90, 28, 48], [90, 91, 48, 49], [91, 92, 49, 50], [92, 93, 50, 51], [201, 94, 32, 52],
    [94, 95, 52, 53], [95, 96, 53, 54], [96, 97, 54, 55], [118, 98, 36, 56], [98, 99, 56, 57], [99, 100, 57, 58],
    [122, 101, 39, 59], [101, 102, 59, 60], [125, 103, 41, 61], [105, 104, 62, 63], [107, 105, 43, 64],
    [108, 106, 64, 65], [110, 107, 66, 67], [111, 108, 67, 68], [112, 109, 68, 69], [114, 110, 70, 71],
    [115, 111, 71, 72], [116, 112, 72, 73], [117, 113, 73, 51], [118, 114, 74, 75], [119, 115, 75, 76],
    [120, 116, 76, 77], [121, 117, 77, 55], [122, 119, 78, 79], [123, 120, 79, 80], [124, 121, 80, 58],
    [125, 123, 81, 82], [126, 124, 82, 60], [127, 126, 83, 61], [147, 130, 19, 84], [128, 131, 84, 85],
    [149, 132, 63, 86], [129, 134, 85, 87], [130, 135, 86, 88], [152, 136, 65, 89], [153, 138, 87, 90],
    [131, 139, 88, 91], [132, 140, 89, 92], [69, 93, 196, 200], [133, 141, 90, 94], [134, 142, 91, 95],
    [135, 143, 92, 96], [136, 159, 93, 97], [137, 160, 94, 78], [138, 144, 95, 98], [139, 145, 96, 99],
    [140, 163, 97, 100], [141, 164, 98, 81], [142, 146, 99, 101], [143, 166, 100, 102], [144, 167, 101, 83],
    [145, 168, 102, 103], [146, 169, 103, 18], [170, 148, 19, 105], [171, 150, 62, 107], [147, 151, 104, 108],
    [148, 154, 105, 111], [149, 155, 106, 112], [175, 156, 66, 114], [150, 157, 107, 115], [151, 158, 108, 116],
    [152, 159, 109, 117], [179, 160, 70, 118], [153, 161, 110, 119], [154, 162, 111, 120], [155, 163, 112, 121],
    [156, 164, 114, 122], [157, 165, 115, 123], [158, 166, 116, 124], [161, 167, 119, 125], [162, 168, 120, 126],
    [165, 169, 123, 127], [170, 172, 104, 130], [170, 173, 128, 131], [190, 174, 106, 132], [171, 176, 129, 134],
    [172, 177, 130, 135], [192, 178, 109, 136], [193, 180, 110, 138], [173, 181, 131, 139], [174, 182, 132, 140],
    [175, 183, 133, 141], [176, 184, 134, 142], [177, 185, 135, 143], [178, 204, 136, 117], [179, 205, 137, 118],
    [180, 186, 138, 144], [181, 187, 139, 145], [182, 207, 140, 121], [183, 208, 141, 122], [184, 188, 142, 146],
    [185, 209, 143, 124], [186, 210, 144, 125], [187, 210, 145, 126], [188, 146, 127], [189, 128, 148, 147],
    [189, 129, 150, 191], [190, 191, 147, 151], [191, 194, 148, 154], [192, 195, 149, 155], [193, 197, 133, 156],
    [194, 198, 150, 157], [195, 199, 151, 158], [196, 200, 152, 159], [197, 201, 137, 160], [198, 202, 153, 161],
    [199, 203, 154, 162], [200, 204, 155, 163], [202, 205, 156, 164], [203, 206, 157, 165], [204, 207, 158, 166],
    [206, 208, 161, 167], [207, 209, 162, 168], [209, 210, 165, 169], [171, 170, 190], [189, 172, 149],
    [171, 173, 172, 192], [191, 174, 152], [175, 153, 194], [193, 176, 173, 195], [194, 177, 174, 196], [195, 178, 113],
    [179, 175, 198], [197, 180, 176, 199], [198, 181, 177, 200], [199, 182, 178, 113], [74, 179, 202],
    [201, 183, 180, 203], [202, 184, 181, 204], [203, 185, 182, 159], [160, 183, 206], [205, 186, 184, 207],
    [206, 187, 185, 163], [164, 186, 209], [208, 188, 187, 166], [167, 188, 168]
]
NodesSycamoreN53M14 = [
    [19, 20, 3], [20, 43, 6], [21, 22, 19, 7], [22, 25, 0, 11], [23, 26, 21, 12], [24, 28, 13], [25, 29, 1, 14],
    [26, 30, 2, 15], [27, 31, 23, 55], [28, 32, 36], [29, 33, 24, 16], [30, 34, 3, 17], [31, 35, 4, 58],
    [33, 36, 5, 39], [34, 37, 6, 18], [35, 38, 7, 60], [37, 39, 10, 41], [38, 40, 11, 61], [40, 41, 14, 127],
    [0, 128, 104, 2], [62, 42, 1, 0], [42, 63, 2, 4], [43, 44, 3, 2], [44, 65, 4, 8], [66, 45, 5, 10], [45, 46, 6, 3],
    [46, 47, 7, 4], [47, 69, 8, 51], [70, 48, 9, 5], [48, 49, 10, 6], [49, 50, 11, 7], [50, 51, 12, 8], [74, 52, 9],
    [52, 53, 13, 10], [53, 54, 14, 11], [54, 55, 15, 12], [78, 56, 9, 13], [56, 57, 16, 14], [57, 58, 17, 15],
    [81, 59, 13, 16], [59, 60, 18, 17], [83, 61, 16, 18], [62, 63, 20, 21], [85, 64, 1, 22], [64, 65, 22, 23],
    [66, 67, 24, 25], [67, 68, 25, 26], [68, 69, 26, 27], [70, 71, 28, 29], [71, 72, 29, 30], [72, 73, 30, 31],
    [73, 93, 31, 27], [74, 75, 32, 33], [75, 76, 33, 34], [76, 77, 34, 35], [77, 97, 35, 8], [78, 79, 36, 37],
    [79, 80, 37, 38], [80, 100, 38, 12], [81, 82, 39, 40], [82, 102, 40, 15], [83, 103, 41, 17], [129, 84, 20, 42],
    [84, 106, 42, 21], [85, 86, 43, 44], [86, 109, 44, 23], [133, 87, 24, 45], [87, 88, 45, 46], [88, 89, 46, 47],
    [89, 113, 47, 27], [137, 90, 28, 48], [90, 91, 48, 49], [91, 92, 49, 50], [92, 93, 50, 51], [201, 94, 32, 52],
    [94, 95, 52, 53], [95, 96, 53, 54], [96, 97, 54, 55], [118, 98, 36, 56], [98, 99, 56, 57], [99, 100, 57, 58],
    [122, 101, 39, 59], [101, 102, 59, 60], [125, 103, 41, 61], [105, 104, 62, 63], [107, 105, 43, 64],
    [108, 106, 64, 65], [110, 107, 66, 67], [111, 108, 67, 68], [112, 109, 68, 69], [114, 110, 70, 71],
    [115, 111, 71, 72], [116, 112, 72, 73], [117, 113, 73, 51], [118, 114, 74, 75], [119, 115, 75, 76],
    [120, 116, 76, 77], [121, 117, 77, 55], [122, 119, 78, 79], [123, 120, 79, 80], [124, 121, 80, 58],
    [125, 123, 81, 82], [126, 124, 82, 60], [127, 126, 83, 61], [147, 130, 19, 84], [128, 131, 84, 85],
    [149, 132, 63, 86], [129, 134, 85, 87], [130, 135, 86, 88], [152, 136, 65, 89], [153, 138, 87, 90],
    [131, 139, 88, 91], [132, 140, 89, 92], [69, 93, 196, 236], [133, 141, 90, 94], [134, 142, 91, 95],
    [135, 143, 92, 96], [136, 159, 93, 97], [137, 160, 94, 78], [138, 144, 95, 98], [139, 145, 96, 99],
    [140, 163, 97, 100], [141, 164, 98, 81], [142, 146, 99, 101], [143, 166, 100, 102], [144, 167, 101, 83],
    [145, 168, 102, 103], [146, 169, 103, 18], [170, 148, 19, 105], [171, 150, 62, 107], [147, 151, 104, 108],
    [148, 154, 105, 111], [149, 155, 106, 112], [175, 156, 66, 114], [150, 157, 107, 115], [151, 158, 108, 116],
    [152, 159, 109, 117], [179, 160, 70, 118], [153, 161, 110, 119], [154, 162, 111, 120], [155, 163, 112, 121],
    [156, 164, 114, 122], [157, 165, 115, 123], [158, 166, 116, 124], [161, 167, 119, 125], [162, 168, 120, 126],
    [165, 169, 123, 127], [170, 172, 104, 130], [170, 173, 128, 131], [190, 174, 106, 132], [171, 176, 129, 134],
    [172, 177, 130, 135], [192, 178, 109, 136], [193, 180, 110, 138], [173, 181, 131, 139], [174, 182, 132, 140],
    [175, 183, 133, 141], [176, 184, 134, 142], [177, 185, 135, 143], [178, 240, 136, 117], [179, 205, 137, 118],
    [180, 186, 138, 144], [181, 187, 139, 145], [182, 243, 140, 121], [183, 208, 141, 122], [184, 188, 142, 146],
    [185, 245, 143, 124], [186, 210, 144, 125], [187, 210, 145, 126], [188, 146, 127], [189, 128, 148, 147],
    [189, 227, 129, 150], [190, 191, 147, 151], [191, 194, 148, 154], [192, 195, 149, 155], [193, 197, 133, 156],
    [194, 198, 150, 157], [195, 199, 151, 158], [196, 200, 152, 159], [197, 201, 137, 160], [198, 202, 153, 161],
    [199, 203, 154, 162], [200, 204, 155, 163], [202, 205, 156, 164], [203, 206, 157, 165], [204, 207, 158, 166],
    [206, 208, 161, 167], [207, 209, 162, 168], [209, 210, 165, 169], [225, 211, 171, 170], [211, 226, 172, 149],
    [227, 212, 173, 172], [212, 228, 174, 152], [229, 213, 175, 153], [213, 214, 176, 173], [214, 215, 177, 174],
    [215, 232, 178, 113], [233, 216, 179, 175], [216, 217, 180, 176], [217, 218, 181, 177], [218, 236, 182, 178],
    [237, 219, 74, 179], [219, 220, 183, 180], [220, 221, 184, 181], [221, 240, 185, 182], [241, 222, 160, 183],
    [222, 223, 186, 184], [223, 243, 187, 185], [244, 224, 164, 186], [224, 245, 188, 187], [167, 188, 168],
    [225, 226, 189, 190], [227, 228, 191, 192], [229, 230, 193, 194], [230, 231, 194, 195], [231, 232, 195, 196],
    [233, 234, 197, 198], [234, 235, 198, 199], [235, 236, 199, 200], [237, 238, 201, 202], [238, 239, 202, 203],
    [239, 240, 203, 204], [241, 242, 205, 206], [242, 243, 206, 207], [244, 245, 208, 209], [189, 211, 226],
    [225, 211, 190], [212, 228, 171, 191], [227, 212, 192], [193, 213, 230], [229, 213, 214, 231], [230, 214, 215, 232],
    [231, 215, 196], [197, 216, 234], [233, 216, 217, 235], [234, 217, 218, 236], [235, 218, 200, 113], [201, 219, 238],
    [237, 219, 220, 239], [238, 220, 221, 240], [239, 221, 204, 159], [205, 222, 242], [241, 222, 223, 243],
    [242, 223, 207, 163], [208, 224, 245], [244, 224, 209, 166]
]
NodesSycamoreN53M20 = [
    [19, 20, 3], [20, 43, 6], [21, 22, 19, 7], [22, 25, 0, 11], [23, 26, 21, 12], [24, 28, 13], [25, 29, 1, 14],
    [26, 30, 2, 15], [27, 31, 23, 55], [28, 32, 36], [29, 33, 24, 16], [30, 34, 3, 17], [31, 35, 4, 58],
    [33, 36, 5, 39], [34, 37, 6, 18], [35, 38, 7, 60], [37, 39, 10, 41], [38, 40, 11, 61], [40, 41, 14, 127],
    [0, 128, 104, 2], [62, 42, 1, 0], [42, 63, 2, 4], [43, 44, 3, 2], [44, 65, 4, 8], [66, 45, 5, 10], [45, 46, 6, 3],
    [46, 47, 7, 4], [47, 69, 8, 51], [70, 48, 9, 5], [48, 49, 10, 6], [49, 50, 11, 7], [50, 51, 12, 8], [74, 52, 9],
    [52, 53, 13, 10], [53, 54, 14, 11], [54, 55, 15, 12], [78, 56, 9, 13], [56, 57, 16, 14], [57, 58, 17, 15],
    [81, 59, 13, 16], [59, 60, 18, 17], [83, 61, 16, 18], [62, 63, 20, 21], [85, 64, 1, 22], [64, 65, 22, 23],
    [66, 67, 24, 25], [67, 68, 25, 26], [68, 69, 26, 27], [70, 71, 28, 29], [71, 72, 29, 30], [72, 73, 30, 31],
    [73, 93, 31, 27], [74, 75, 32, 33], [75, 76, 33, 34], [76, 77, 34, 35], [77, 97, 35, 8], [78, 79, 36, 37],
    [79, 80, 37, 38], [80, 100, 38, 12], [81, 82, 39, 40], [82, 102, 40, 15], [83, 103, 41, 17], [129, 84, 20, 42],
    [84, 106, 42, 21], [85, 86, 43, 44], [86, 109, 44, 23], [133, 87, 24, 45], [87, 88, 45, 46], [88, 89, 46, 47],
    [89, 113, 47, 27], [137, 90, 28, 48], [90, 91, 48, 49], [91, 92, 49, 50], [92, 93, 50, 51], [202, 94, 32, 52],
    [94, 95, 52, 53], [95, 96, 53, 54], [96, 97, 54, 55], [118, 98, 36, 56], [98, 99, 56, 57], [99, 100, 57, 58],
    [122, 101, 39, 59], [101, 102, 59, 60], [125, 103, 41, 61], [105, 104, 62, 63], [107, 105, 43, 64],
    [108, 106, 64, 65], [110, 107, 66, 67], [111, 108, 67, 68], [112, 109, 68, 69], [114, 110, 70, 71],
    [115, 111, 71, 72], [116, 112, 72, 73], [117, 113, 73, 51], [118, 114, 74, 75], [119, 115, 75, 76],
    [120, 116, 76, 77], [121, 117, 77, 55], [122, 119, 78, 79], [123, 120, 79, 80], [124, 121, 80, 58],
    [125, 123, 81, 82], [126, 124, 82, 60], [127, 126, 83, 61], [147, 130, 19, 84], [128, 131, 84, 85],
    [149, 132, 63, 86], [129, 134, 85, 87], [130, 135, 86, 88], [152, 136, 65, 89], [153, 138, 87, 90],
    [131, 139, 88, 91], [132, 140, 89, 92], [69, 93, 197, 221], [133, 141, 90, 94], [134, 142, 91, 95],
    [135, 143, 92, 96], [136, 159, 93, 97], [137, 160, 94, 78], [138, 144, 95, 98], [139, 145, 96, 99],
    [140, 163, 97, 100], [141, 164, 98, 81], [142, 146, 99, 101], [143, 166, 100, 102], [144, 167, 101, 83],
    [145, 168, 102, 103], [146, 169, 103, 18], [170, 148, 19, 105], [171, 150, 62, 107], [147, 151, 104, 108],
    [148, 154, 105, 111], [149, 155, 106, 112], [175, 156, 66, 114], [150, 157, 107, 115], [151, 158, 108, 116],
    [152, 159, 109, 117], [179, 160, 70, 118], [153, 161, 110, 119], [154, 162, 111, 120], [155, 163, 112, 121],
    [156, 164, 114, 122], [157, 165, 115, 123], [158, 166, 116, 124], [161, 167, 119, 125], [162, 168, 120, 126],
    [165, 169, 123, 127], [189, 172, 104, 130], [170, 173, 128, 131], [191, 174, 106, 132], [171, 176, 129, 134],
    [172, 177, 130, 135], [193, 178, 109, 136], [194, 180, 110, 138], [173, 181, 131, 139], [174, 182, 132, 140],
    [175, 183, 133, 141], [176, 184, 134, 142], [177, 185, 135, 143], [178, 225, 136, 117], [179, 206, 137, 118],
    [180, 186, 138, 144], [181, 187, 139, 145], [182, 228, 140, 121], [183, 209, 141, 122], [184, 188, 142, 146],
    [185, 230, 143, 124], [186, 211, 144, 125], [187, 231, 145, 126], [188, 297, 146, 127], [189, 190, 128, 148],
    [190, 213, 129, 150], [191, 192, 147, 151], [192, 195, 148, 154], [193, 196, 149, 155], [194, 198, 133, 156],
    [195, 199, 150, 157], [196, 200, 151, 158], [197, 201, 152, 159], [198, 202, 137, 160], [199, 203, 153, 161],
    [200, 204, 154, 162], [201, 205, 155, 163], [203, 206, 156, 164], [204, 207, 157, 165], [205, 208, 158, 166],
    [207, 209, 161, 167], [208, 210, 162, 168], [210, 211, 165, 169], [170, 147, 298, 274], [232, 212, 171, 170],
    [212, 233, 172, 149], [213, 214, 173, 172], [214, 235, 174, 152], [236, 215, 175, 153], [215, 216, 176, 173],
    [216, 217, 177, 174], [217, 239, 178, 113], [240, 218, 179, 175], [218, 219, 180, 176], [219, 220, 181, 177],
    [220, 221, 182, 178], [244, 222, 74, 179], [222, 223, 183, 180], [223, 224, 184, 181], [224, 225, 185, 182],
    [248, 226, 160, 183], [226, 227, 186, 184], [227, 228, 187, 185], [251, 229, 164, 186], [229, 230, 188, 187],
    [253, 231, 167, 188], [232, 233, 190, 191], [255, 234, 171, 192], [234, 235, 192, 193], [236, 237, 194, 195],
    [237, 238, 195, 196], [238, 239, 196, 197], [240, 241, 198, 199], [241, 242, 199, 200], [242, 243, 200, 201],
    [243, 263, 201, 113], [244, 245, 202, 203], [245, 246, 203, 204], [246, 247, 204, 205], [247, 267, 205, 159],
    [248, 249, 206, 207], [249, 250, 207, 208], [250, 270, 208, 163], [251, 252, 209, 210], [252, 272, 210, 166],
    [253, 273, 211, 168], [299, 254, 190, 212], [254, 276, 212, 191], [255, 256, 213, 214], [256, 279, 214, 193],
    [303, 257, 194, 215], [257, 258, 215, 216], [258, 259, 216, 217], [259, 283, 217, 197], [307, 260, 198, 218],
    [260, 261, 218, 219], [261, 262, 219, 220], [262, 263, 220, 221], [371, 264, 202, 222], [264, 265, 222, 223],
    [265, 266, 223, 224], [266, 267, 224, 225], [288, 268, 206, 226], [268, 269, 226, 227], [269, 270, 227, 228],
    [292, 271, 209, 229], [271, 272, 229, 230], [295, 273, 211, 231], [275, 274, 232, 233], [277, 275, 213, 234],
    [278, 276, 234, 235], [280, 277, 236, 237], [281, 278, 237, 238], [282, 279, 238, 239], [284, 280, 240, 241],
    [285, 281, 241, 242], [286, 282, 242, 243], [287, 283, 243, 221], [288, 284, 244, 245], [289, 285, 245, 246],
    [290, 286, 246, 247], [291, 287, 247, 225], [292, 289, 248, 249], [293, 290, 249, 250], [294, 291, 250, 228],
    [295, 293, 251, 252], [296, 294, 252, 230], [297, 296, 253, 231], [317, 300, 189, 254], [298, 301, 254, 255],
    [319, 302, 233, 256], [299, 304, 255, 257], [300, 305, 256, 258], [322, 306, 235, 259], [323, 308, 257, 260],
    [301, 309, 258, 261], [302, 310, 259, 262], [239, 263, 366, 370], [303, 311, 260, 264], [304, 312, 261, 265],
    [305, 313, 262, 266], [306, 329, 263, 267], [307, 330, 264, 248], [308, 314, 265, 268], [309, 315, 266, 269],
    [310, 333, 267, 270], [311, 334, 268, 251], [312, 316, 269, 271], [313, 336, 270, 272], [314, 337, 271, 253],
    [315, 338, 272, 273], [316, 339, 273, 169], [340, 318, 189, 275], [341, 320, 232, 277], [317, 321, 274, 278],
    [318, 324, 275, 281], [319, 325, 276, 282], [345, 326, 236, 284], [320, 327, 277, 285], [321, 328, 278, 286],
    [322, 329, 279, 287], [349, 330, 240, 288], [323, 331, 280, 289], [324, 332, 281, 290], [325, 333, 282, 291],
    [326, 334, 284, 292], [327, 335, 285, 293], [328, 336, 286, 294], [331, 337, 289, 295], [332, 338, 290, 296],
    [335, 339, 293, 297], [340, 342, 274, 300], [340, 343, 298, 301], [360, 344, 276, 302], [341, 346, 299, 304],
    [342, 347, 300, 305], [362, 348, 279, 306], [363, 350, 280, 308], [343, 351, 301, 309], [344, 352, 302, 310],
    [345, 353, 303, 311], [346, 354, 304, 312], [347, 355, 305, 313], [348, 374, 306, 287], [349, 375, 307, 288],
    [350, 356, 308, 314], [351, 357, 309, 315], [352, 377, 310, 291], [353, 378, 311, 292], [354, 358, 312, 316],
    [355, 379, 313, 294], [356, 380, 314, 295], [357, 380, 315, 296], [358, 316, 297], [359, 298, 318, 317],
    [359, 299, 320, 361], [360, 361, 317, 321], [361, 364, 318, 324], [362, 365, 319, 325], [363, 367, 303, 326],
    [364, 368, 320, 327], [365, 369, 321, 328], [366, 370, 322, 329], [367, 371, 307, 330], [368, 372, 323, 331],
    [369, 373, 324, 332], [370, 374, 325, 333], [372, 375, 326, 334], [373, 376, 327, 335], [374, 377, 328, 336],
    [376, 378, 331, 337], [377, 379, 332, 338], [379, 380, 335, 339], [341, 340, 360], [359, 342, 319],
    [341, 343, 342, 362], [361, 344, 322], [345, 323, 364], [363, 346, 343, 365], [364, 347, 344, 366], [365, 348, 283],
    [349, 345, 368], [367, 350, 346, 369], [368, 351, 347, 370], [369, 352, 348, 283], [244, 349, 372],
    [371, 353, 350, 373], [372, 354, 351, 374], [373, 355, 352, 329], [330, 353, 376], [375, 356, 354, 377],
    [376, 357, 355, 333], [334, 356, 379], [378, 358, 357, 336], [337, 358, 338]
]


def get_nodes_list(len_list: int = 4):
    nodes = [[] for _ in range(len_list)]  # 初始化邻接表
    for i in range(len_list):
        if i > 0:
            nodes[i].append(i - 1)
        if i < len_list - 1:
            nodes[i].append(i + 1)
        nodes[i].append(i + len_list)
        nodes.append([i])
    return nodes


def get_nodes_ary(nodes_list: list) -> TEN:
    # nodes_list = NodesSycamore
    nodes_ary = th.zeros((len(nodes_list), max([len(nodes) for nodes in nodes_list])), dtype=th.int) - 1
    # # -1 表示这里没有连接
    for i, nodes in enumerate(nodes_list):
        for j, node in enumerate(nodes):
            nodes_ary[i, j] = node
    return nodes_ary


def get_edges_ary(nodes_ary: TEN) -> TEN:
    edges_ary = th.zeros_like(nodes_ary, dtype=nodes_ary.dtype)
    edges_ary[nodes_ary >= 0] = -2  # -2 表示这里的 edge_i 需要被重新赋值
    edges_ary[nodes_ary == -1] = -1  # -1 表示这里的 node 没有连接另一个 node

    num_edges = 0
    for i, nodes in enumerate(nodes_ary):  # i 表示节点的编号
        for j, node in enumerate(nodes):  # node 表示跟编号为i的节点相连的另一个节点
            edge_i = edges_ary[i, j]
            if edge_i == -2:
                _j = th.where(nodes_ary[node] == i)
                edges_ary[i, j] = num_edges
                edges_ary[node, _j] = num_edges
                num_edges += 1
    return edges_ary


def get_node_dims_arys(nodes_ary: TEN) -> list:
    num_nodes = nodes_ary.shape[0]

    arys = []
    for nodes in nodes_ary:
        positive_nodes = nodes[nodes >= 0].long()
        ary = th.zeros((num_nodes,), dtype=th.int)  # 因为都是2，所以我用0 表示 2**0==1
        ary[positive_nodes] = 1  # 2量子比特门，这里的计算会带来2个单位的乘法，因为都是2，所以我用1 表示 2**1==2
        arys.append(ary)
    return arys


def get_node_bool_arys(nodes_ary: TEN) -> list:
    num_nodes = nodes_ary.shape[0]

    arys = []
    for i, nodes in enumerate(nodes_ary):
        ary = th.zeros((num_nodes,), dtype=th.bool)
        ary[i] = True
        arys.append(ary)
    return arys


class TensorNetworkEnv:
    def __init__(self, nodes_list: list, device: th.device):
        self.device = device

        '''build node_arys and edges_ary'''
        nodes_ary = get_nodes_ary(nodes_list)
        num_nodes = nodes_ary.max().item() + 1
        assert num_nodes == nodes_ary.shape[0]

        edges_ary = get_edges_ary(nodes_ary)
        num_edges = edges_ary.max().item() + 1
        assert num_edges == (edges_ary != -1).sum() / 2

        # self.nodes_ary = nodes_ary
        self.edges_ary = edges_ary.to(device)
        self.num_nodes = num_nodes
        self.num_edges = num_edges

        '''build for get_log10_multiple_times'''
        node_dims_arys = get_node_dims_arys(nodes_ary)
        assert num_edges == sum([(ary == 1).sum().item() for ary in node_dims_arys]) / 2

        node_bool_arys = get_node_bool_arys(nodes_ary)
        assert num_nodes == sum([ary.sum() for ary in node_bool_arys])

        self.node_dims_arys = [ary.to(device) for ary in node_dims_arys]
        self.node_bool_arys = [ary.to(device) for ary in node_bool_arys]

    def get_log10_multiple_times(self, edge_argsorts: TEN) -> TEN:
        # edge_argsort = th.rand(self.num_edges).argsort()
        device = self.device
        edges_ary: TEN = self.edges_ary

        num_envs, num_edges = edge_argsorts.shape
        node_dims_aryss = [[ary.clone() for ary in self.node_dims_arys] for _ in range(num_envs)]
        node_bool_aryss = [[ary.clone() for ary in self.node_bool_arys] for _ in range(num_envs)]

        mult_pow_timess = th.zeros((num_envs, num_edges), dtype=th.float64, device=device)

        vec_env_is = th.arange(num_envs, device=device)
        for i in range(num_edges):
            edge_is = edge_argsorts[:, i]
            # [edge_i for edge_i in edge_is]

            """find two nodes of an edge_i"""
            # node_i0, node_i1 = th.where(edges_ary == edge_i)[0]  # 找出这条edge 两端的node
            # assert isinstance(node_i0.item(), int)
            # assert isinstance(node_i1.item(), int)
            vec_edges_ary: TEN = edges_ary[None, :, :]
            vec_edges_is: TEN = edge_is[:, None, None]
            res = th.where(vec_edges_ary == vec_edges_is)[1]
            res = res.reshape((num_envs, 2))
            node_i0s, node_i1s = res[:, 0], res[:, 1]

            node_dims_ten = th.stack([th.stack(arys) for arys in node_dims_aryss])
            node_bool_ten = th.stack([th.stack(arys) for arys in node_bool_aryss])

            # contract_dims = node_dims_arys[node_i0] + node_dims_arys[node_i1]  # 计算收缩后的node 的邻接张量的维度 以及来源
            contract_dimss = node_dims_ten[vec_env_is, node_i0s] + node_dims_ten[vec_env_is, node_i1s]

            # contract_bool = node_bool_arys[node_i0] | node_bool_arys[node_i1]  # 计算收缩后的node 由哪些原初node 合成
            contract_bools = node_bool_ten[vec_env_is, node_i0s] + node_bool_ten[vec_env_is, node_i1s]

            # 收缩掉的edge 只需要算一遍乘法。因此上面对 两次重复的指数求和后乘以0.5
            mult_pow_times = contract_dimss.sum(dim=1) - (contract_dimss * contract_bools).sum(dim=1) * 0.5

            # assert mult_pow_times.shape == (num_envs,)
            mult_pow_timess[:, i] = mult_pow_times

            for j in range(num_envs):
                node_i0 = node_i0s[j]
                node_i1 = node_i1s[j]
                node_dims_arys = node_dims_aryss[j]
                node_bool_arys = node_bool_aryss[j]

                contract_dimss[j][contract_bools[j]] = 0  # 把收缩掉的边的乘法数量赋值为1，接下来不再参与乘法次数的计算
                node_dims_arys[node_i0][:] = node_dims_arys[node_i1] = contract_dimss[j]  # 让收缩前的两个node 指向收缩后的node
                node_bool_arys[node_i0][:] = node_bool_arys[node_i1] = contract_bools[j]  # 让收缩前的两个node 指向收缩后的node

        temp_power = 10  # 计算这个乘法个数时，即便用 float64 也偶尔会过拟合，所以先除以 2**temp_power ，求log10 后再恢复它
        multiple_times = (2 ** (mult_pow_timess - temp_power)).sum(dim=1)
        multiple_times = multiple_times.log10() + th.log10(th.tensor(2 ** temp_power))
        return multiple_times.detach()

    """
    L2O_H_term.py", line 463, in opt_train
    gradients = p.grad.view(hid_dim, 1).detach().clone().requires_grad_(True)
    """


def run():
    gpu_id = int(sys.argv[1]) if len(sys.argv) > 1 else 0
    device = th.device(f'cuda:{gpu_id}' if th.cuda.is_available() and gpu_id >= 0 else 'cpu')

    env = TensorNetworkEnv(nodes_list=NodesSycamoreN53M20, device=device)
    print(f"\nnum_nodes      {env.num_nodes:9}"
          f"\nnum_edges      {env.num_edges:9}")
    num_envs = 8

    edge_arys = th.rand((num_envs, env.num_edges), device=device)
    # th.save(edge_arys, 'temp.pth')
    # edge_arys = th.load('temp.pth', map_location=device)

    multiple_times = env.get_log10_multiple_times(edge_argsorts=edge_arys.argsort(dim=1))
    print(f"multiple_times(log10) {multiple_times}")


if __name__ == '__main__':
    run()